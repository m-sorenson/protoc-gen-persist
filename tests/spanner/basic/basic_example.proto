// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package tests;

option go_package = "github.com/tcncloud/protoc-gen-persist/tests/spanner/basic;basic";
option (persist.pkg) = "tests/spanner/basic;basic";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";


import "tests/test/test.proto";

enum MyEnum {
    OPTION_0 = 0;
    OPTION_1 = 1;
}

enum MappedEnum {
	OPT_0 = 0;
	OPT_1 = 1;
}

message Empty {}
message Something {
	message SomethingElse {
		string thing = 1;
	}
	SomethingElse thing = 2;
	MyEnum myenum = 3;
	MappedEnum mappedenum = 4;
}

message HasTimestamp {
	google.protobuf.Timestamp time = 1;
	Something some = 2;
	string str = 3;
	test.ExampleTable table = 4;
	repeated string strs = 5;
	repeated test.ExampleTable tables = 6;
	repeated Something somes = 7;
	repeated google.protobuf.Timestamp times = 8;
}

service ExtraSrv {
  option (persist.service_type) = SPANNER;
  option (persist.ql) = {
    queries: [{
      name: "extra",
      query: ["SELECT * FROM extra_unary"],
      in: ".tests.Empty",
      out: ".tests.HasTimestamp",
    }]
  };

	rpc ExtraUnary(test.NumRows) returns (test.ExampleTable) {
		option (persist.opts) = { query: "extra" };
	};
	rpc ExtraMethod(test.ExampleTable) returns (test.ExampleTable);
}

service MySpanner {
  option (persist.service_type) = SPANNER;
  option (persist.mapping) = {
    types: [{
      proto_type_name: "google.protobuf.Timestamp"
      proto_type:  TYPE_MESSAGE
    }]
  };
  option (persist.ql) = {
      queries: [{
      name: "insert"
      query: ["Insert into example_table (id, start_time, name)",
          "Values (@id, @start_time, 'bananas')"]
      in: "tests.test.ExampleTable",
      out: ".tests.Empty"
    },{
      name: "select",
      query: ["SELECT * from example_table Where id=@id AND name=@name"]
      in: "tests.test.ExampleTable",
      out: ".tests.test.ExampleTable"
    },{
      name: "select_index",
      query: ["SELECT * from example_table@{FORCE_INDEX=index} Where id=@id AND name=@name"]
      in: "tests.test.ExampleTable",
      out: "tests.test.ExampleTable"
    },{
      name: "update",
      query: ["Update example_table ",
        "set start_time=@start_time, name='oranges'",
        "PrimaryKey(id=@id)"]
      in: "tests.test.ExampleTable",
      out: ".tests.Empty",
    },{
      name: "delete",
      query: ["DELETE FROM example_table START(@start_id) END(@end_id) KIND(CO)"]
      in: "tests.test.ExampleTableRange",
      out: ".tests.Empty",
    }, {
      name: "select_all",
      query: ["SELECT * FROM example_table"]
      in: ".tests.Empty",
      out: "tests.test.ExampleTable",
    }, {
      name: "insert_3",
      query: ["INSERT INTO example_table (id, start_time, name) VALUES (@id, @start_time, 3)"]
      in: "tests.test.ExampleTable",
      out: ".tests.Empty",
    }, {
      name: "delete_id",
      query: ["DELETE FROM example_table VALUES(@id)"]
      in: "tests.test.ExampleTable",
      out: ".tests.Empty",
    }, {
      name: "set_name_asdf",
      query: ["update example_table set name='asdf' pk(id=@id)"]
      in: "tests.test.ExampleTable",
      out: ".tests.Empty",
    }]
  };
  rpc UniaryInsert(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.opts) = {
      query: "insert",
    };
  };
  rpc UniarySelect(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.opts) = {
      query: "select"
    };
  };

  rpc UniarySelectWithDirectives(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.opts) = {
      query: "select_index"
    };
  };
  rpc UniaryUpdate(test.ExampleTable) returns (test.PartialTable) {
    option (persist.opts) = {
      query: "update"
    };
  };
  rpc UniaryDeleteRange(test.ExampleTableRange) returns (test.ExampleTable) {
    option (persist.opts) = {
      query: "delete"
    };
  };
  rpc ServerStream(test.Name) returns (stream test.ExampleTable) {
    option (persist.opts) = {
      query: "select_all",
    };
  };
  rpc ClientStreamInsert(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.opts) = {
      query: "insert_3"
    };
  };
  rpc ClientStreamDelete(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.opts) = {
      query: "delete_id"
    };
  };
  rpc UniarySelectWithHooks(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.opts) = {
      query: "select_index"
      before: true
      after: true
    };
  };
  rpc ServerStreamWithHooks(test.Name) returns (stream test.ExampleTable) {
    option (persist.opts) = {
      query: "select_all"
      before: true
      after: true
    };
  };
  rpc ClientStreamUpdateWithHooks(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.opts) = {
      query: "set_name_asdf",
      before: true
      after: true
    };
  };
}
